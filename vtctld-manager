#!/bin/bash
#
# Manage vtctld process(es)
#

# source the common_routines.sh script which should be in the same directory
mydir=$(dirname $0)
test -r $mydir/common_routines.sh || {
	echo "ERROR: $(basename $0): can't find expected $mydir/common_routines.sh. Exiting"
	exit 1
}
source $mydir/common_routines.sh
process=vtctld

start () {
	echo "Starting $process..."

	mkdir_if_missing $VTDATAROOT/backups $VTDATAROOT/tmp

	# don't run if already running
	if check_status $process $PIDFILE; then
		msg_fatal "$process is already running, not starting"
	fi

	${VTROOT}/bin/$process \
		${TOPOLOGY_FLAGS} \
		-cell ${CELL} \
		-web_dir ${VTTOP}/web/vtctld \
		-web_dir2 ${VTTOP}/web/vtctld2/app \
		-workflow_manager_init \
		-workflow_manager_use_election \
		-service_map 'grpc-vtctl' \
		-backup_storage_implementation file \
		-file_backup_storage_root ${VTDATAROOT}/backups \
		-log_dir ${VTDATAROOT}/tmp \
		-port ${WEB_PORT} \
		-grpc_port ${GRPC_PORT} \
		-pid_file $PIDFILE \
		>> ${VTDATAROOT}/tmp/$process.out 2>&1 &

	disown -a

	msg_info "Access $process web UI at http://${HOSTNAME}:${WEB_PORT}"
	msg_info "Send commands with: vtctlclient -server ${HOSTNAME}:${GRPC_PORT} ..."
	msg_info "Note: $process writes logs under $VTDATAROOT/tmp."
}

stop () {
	stop_by_pidfile $process $PIDFILE
}

status () {
        check_status $process $PIDFILE
}

###
# start here
###

verbose=
while getopts vh flag; do
	case $flag in
	v) verbose=1;;
	h) usage $process 0;;
	esac
done
shift $(($OPTIND - 1))

if [ $# != 2 ]; then
	usage $process 1
fi

ACTION=$1
check_action "$ACTION" ||\
	usage $process 1

UNIQUE_ID=$2
if [ -z "$UNIQUE_ID" ]; then
	usage $process 1
fi

# find the instance's hostname and see if it's mine
h=$(vtctld_hostname_from_id $UNIQUE_ID)
if [ -z "$h" ]; then
	msg_fatal "No could not find a hostname from id $UNIQUE_ID"
fi

u=$(vtctld_user_from_id $UNIQUE_ID)
[ -z "$u" ] && \
	msg_fatal "Could not find a username from id $UNIQUE_ID"

# set the environment correctly from the hostname/process
set_environment_from_parameters $h $process $UNIQUE_ID

if [ "$h" != "$(hostname)" ]; then
	copy_files $h $u

	msg_verbose "Running $h:$myname $UNIQUE_ID"
	ssh $h sudo -E -u $u $VTDEPLOY/$myname $ACTION $UNIQUE_ID
	exit $?
	# should never get here!
fi

msg_verbose "Running $myname $UNIQUE_ID locally"

WEB_PORT=$(vtctld_web_port_from_id $UNIQUE_ID)
GRPC_PORT=$(vtctld_grpc_port_from_id $UNIQUE_ID)
CELL=$(vtctld_cell_from_id $UNIQUE_ID)
VITESS_USER=$(vtctld_user_from_id $UNIQUE_ID)
PIDFILE=$VTDATAROOT/tmp/$process.pid

# now do the real work
case $ACTION in
start)          start;;
stop)           stop;;
status)         status;;
restart)        stop && start;;
esac
