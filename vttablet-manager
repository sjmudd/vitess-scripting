#!/bin/bash

mydir=$(dirname $0)
test -r $mydir/common_routines.sh || {
	echo "ERROR: $(basename $0): can't find expected $mydir/common_routines.sh. Exiting"
	exit 1
}
source $mydir/common_routines.sh
process=vttablet

# start vttablet
start () {
      	# get needed credentials
	read_credential_config $UNIQUE_ID

	# create any missing directories
	mkdir_if_missing ${VTDATAROOT}/tmp ${VTDATAROOT}/backups

	# don't run if already running
	if check_status $process $PIDFILE; then
		msg_fatal "$process for $ALIAS is already running, not starting"
	fi

	echo "Starting $process for $ALIAS..."

	# we run as the local user so no problems with the .out file
	$VTROOT/bin/vttablet \
		$TOPOLOGY_FLAGS \
		-log_dir $VTDATAROOT/tmp \
		-tablet-path $ALIAS \
		-tablet_hostname "$HOSTNAME" \
		-init_keyspace $KEYSPACE \
		-init_shard $SHARD \
		-init_tablet_type $TABLET_TYPE \
		-init_db_name_override $DBNAME \
		-mycnf_mysql_port $MYSQL_PORT \
		-health_check_interval 5s \
		-enable_semi_sync \
		-enable_replication_reporter \
		$enable_heartbeat \
		$backup_config \
		-binlog_use_v3_resharding_mode \
		-port $WEB_PORT \
		-enforce_strict_trans_tables=false \
		-grpc_port $GRPC_PORT \
		-grpc_max_message_size $GRPC_MAX_MESSAGE_SIZE \
		-service_map 'grpc-queryservice,grpc-tabletmanager,grpc-updatestream' \
		-pid_file $PIDFILE \
		-vtctld_addr http://${VTCTLD_HOST}:${VTCTLD_WEB_PORT}/ \
		$DBCONFIG_FLAGS \
		>> $VTDATAROOT/$TABLET_DIR/$process.out 2>&1 &

	pid=$!
	if ps -p $pid >/dev/null 2>&1; then
		msg_info "vttablet started [pid: $pid]"
		echo "Access tablet $ALIAS at http://$HOSTNAME:$WEB_PORT/debug/status"
	else
		msg_fatal "vttablet failed to start, pid $pid not found"
	fi

	disown -a
}

stop () {
	echo "Stopping vttablet for $ALIAS..."
	stop_by_pidfile $process $PIDFILE
}

status () {
	check_status $process $PIDFILE
}

process_instance () {
	local UNIQUE_ID=$1
	local h
	local u

	if [ -z "$UNIQUE_ID" ]; then
		usage $process 1
	fi

	# find the instance's hostname and see if it's mine
	h=$(hostname_from_id $UNIQUE_ID)
	[ -z "$h" ] && \
		msg_fatal "Could not find a hostname from id $UNIQUE_ID"

	u=$(vttablet_user_from_id $UNIQUE_ID)
	[ -z "$u" ] && \
		msg_fatal "Could not find a username from id $UNIQUE_ID"

	# set the environment correctly from the hostname/process
	set_environment_from_parameters $h $process $UNIQUE_ID

	if [ "$h" != "$(hostname)" ]; then
		copy_files $h $u

		msg_verbose "Running $h:$myname $UNIQUE_ID"
		ssh $h sudo -E -u $u $VTDEPLOY/$myname $ACTION $UNIQUE_ID
		return $?
		# should never get here!
	fi

	msg_verbose "Running $myname $UNIQUE_ID locally"

	DBNAME=$(keyspace_from_id $UNIQUE_ID)
	KEYSPACE=$DBNAME

	TABLET_DIR=$(printf "vt_%010d" $UNIQUE_ID)
	MYSQL_PORT=$(mysql_port_from_id $UNIQUE_ID)
	WEB_PORT=$(web_port_from_id $UNIQUE_ID)
	GRPC_PORT=$(grpc_port_from_id $UNIQUE_ID)
	ALIAS=$(alias_from_id $UNIQUE_ID)
	SHARD=$(shard_from_id $UNIQUE_ID)
	VTTABLET_USER=$(vttablet_user_from_id $UNIQUE_ID)
	# lower case the values just in case
	ADD_BACKUP_CONFIG=$(get_backup_config $UNIQUE_ID | tr A-Z a-z)
	ADD_HEARTBEAT_CONFIG=$(configure_heartbeat_from_id $UNIQUE_ID | tr A-Z a-z)

	CELL=$(cell_from_id $UNIQUE_ID)
	VTCTLD_FIRST_ID=$(vtctld_first_id_from_cell $CELL)
	VTCTLD_HOST=$(vtctld_hostname_from_id $VTCTLD_FIRST_ID)
	VTCTLD_WEB_PORT=$(vtctld_web_port_from_id $VTCTLD_FIRST_ID)

	TABLET_TYPE=replica
	PIDFILE=$VTDATAROOT/$TABLET_DIR/vttablet.pid

	BACKUP_CONFIG=
	if [ "$ADD_BACKUP_CONFIG" = yes ]; then
		BACKUP_CONFIG="
			-backup_storage_implementation file \
	                -file_backup_storage_root $VTDATAROOT/backups \
	                -restore_from_backup"
	fi
	enable_heartbeat=
	if [ "$ADD_HEARTBEAT_CONFIG" = yes ]; then
		enable_heartbeat="-heartbeat_enable"
	fi

	# now do the real work
	case $ACTION in
	start)		start;;
	stop)		stop;;
	status)		status;;
	restart)	stop && start;;
	esac
}

###
# start here
###

verbose=
while getopts vh flag; do
	case $flag in
	v) verbose=1;;
	h) usage $process 0;;
	esac
done
shift $(($OPTIND - 1))

if [ $# -lt 2 ]; then
	usage $process 1
fi

ACTION=$1
check_action "$ACTION" ||\
	usage $process 1

shift

# iterate over each instance
while [ $# != 0 ]; do
	process_instance $1
	shift
done
