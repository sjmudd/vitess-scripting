#!/bin/bash
#
# start up zookeeper instances
#

mydir=$(dirname $0)
test -r $mydir/common_routines.sh || {
	echo "ERROR: $(basename $0): can't find expected $mydir/common_routines.sh. Exiting"
	exit 1
}
source $mydir/common_routines.sh

hostname_from_id () {
        local id="$1"

        awk -v id=$id '{ if ($1 == id) print $2 }' $zk_config_file
}

ports_from_id () {
        local id="$1"

        awk -v id=$id '{ if ($1 == id) print $2 }' $zk_config_file
}

style_from_id () {
        local id="$1"

        awk -v id=$id '{ if ($1 == id) print $3 }' $zk_config_file
}

user_from_id () {
        local id="$1"

        awk -v id=$id '{ if ($1 == id) print $4 }' $zk_config_file
}

# get the list of our ids from the config file
get_ids () {
        awk '{ if ($4 == "ours") print $1 }' $zk_config_file
}

usage () {
	local rc=${1:-1}

	cat <<-EOF
	$myname (C) 2017 Simon J Mudd <sjmudd@pobox.com>

	Script to manage zookeeper instance for vitess.
	Usage: $myname [options] <start|stop|status|restart> <instance_id>

	<instance_id> can be ALL which will manage all the instances at once.

        Instances not confgiured as ours will not be managed.

	options:
	-h help message
	-v verbose logging
	EOF

	exit $rc
}

# start a zookeeper instance
start () {
	action='init'

	if [ -f $ZK_DIR/myid ]; then
		echo "Resuming from existing ZK data dir:"
		echo "    $ZK_DIR"
		action='start'
	fi

	$sudo_exec \
	$VTROOT/bin/zkctl \
		-zk.myid $UNIQUE_ID \
		-zk.cfg $ZK_CONFIG \
		-log_dir $VTDATAROOT/tmp
		$action \
		> $VTDATAROOT/tmp/zkctl_$UNIQUE_ID.out 2>&1 &

	if ! wait $!; then
		echo "ZK server number $UNIQUE_ID failed to start. See log:"
		echo "    $VTDATAROOT/tmp/zkctl_$UNIQUE_ID.out"
	else
		echo "Started zk server $UNIQUE_ID"
	fi
}

# stop zookeeper instance
stop () {
	action='shutdown'

	$sudo_exec \
	$VTROOT/bin/zkctl \
		-zk.myid $UNIQUE_ID \
		-zk.cfg $ZK_CONFIG \
		-log_dir $VTDATAROOT/tmp \
		$action \
		> $VTDATAROOT/tmp/zkctl_$UNIQUE_ID.out 2>&1 &

	if ! wait $!; then
		echo "ZK server number $UNIQUE_ID failed to stop. See log:"
		    echo "    $VTDATAROOT/tmp/zkctl_$UNIQUE_ID.out"
	else
		echo "Stopped zk server $UNIQUE_ID"
	fi
}

status () {
	msg_info "Do not know how to check the zookeeper status of id $UNIQUE_ID yet"
}

###
# start here
###

verbose=
opt_v=
while getopts vh flag; do
	case $flag in
	v)	verbose=1
		opt_v=-v
	;;
	h) usage 0;;
	esac
done
shift $(($OPTIND - 1))

if [ $# != 2 ]; then
	usage 1
fi

ACTION=$1
if [ -z "$ACTION" ]; then
	usage 1
fi

UNIQUE_ID=$2
if [ -z "$UNIQUE_ID" ]; then
	usage 1
fi

if [ "$UNIQUE_ID" = ALL -o "$UNIQUE_ID" = all ]; then
	msg_info "Getting ids that match 'ours' in $zk_config_file"
	ids=$(get_ids)

	if [ -z "$ids" ]; then
		msg_info "No 'ours' ids found in $zk_config_file. Doing nothing"
		exit 0
	fi
	# clean up carriage returns
	ids=$(echo "$ids" | tr "\n" ' ')
	msg_info "Found: $ids"

	for id in $ids; do
		$0 $opt_v $ACTION $id
	done
	exit $?

	# should not get here
fi

# find the instance's hostname and see if it's mine
h=$(hostname_from_id $UNIQUE_ID)
if [ -z "$h" ]; then
	msg_fatal "Could not find a hostname from id $UNIQUE_ID"
fi
if [ "$h" != "$(hostname)" ]; then
	copy_files $h

	msg_verbose "Running $h:$myname $UNIQUE_ID"
	ssh $h ./$myname $ACTION $UNIQUE_ID ||\
		msg_fatal "Failed to run $h:$myname"

	exit $?
	# should never get here!
fi

msg_verbose "Running $myname $UNIQUE_ID locally"

VITESS_USER=$(user_from_id $UNIQUE_ID)
if [ "$USER" != "$VITESS_USER" ]; then
	sudo_exec="sudo -E -u $VITESS_USER"
	sudo_kill="sudo -E -u $VITESS_USER kill"
else
	sudo_exec=
	sudo_kill=kill
fi

ZK_DIR=$(printf "$VTDATAROOT/zk_%03d" $UNIQUE_ID)
sudo_mkdir_if_missing $VTDATAROOT/tmp

# now do the real work
case $ACTION in
start)          start;;
stop)           stop;;
status)         status;;
restart)        stop && start;;
*)              usage 1;;
esac
